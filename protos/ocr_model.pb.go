// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ocr_model.proto

package ocrModel_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	FilePath             string   `protobuf:"bytes,1,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_ocr_model_48265b0bae3d4b7a, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type Response struct {
	Recognition          []string `protobuf:"bytes,1,rep,name=recognition" json:"recognition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ocr_model_48265b0bae3d4b7a, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRecognition() []string {
	if m != nil {
		return m.Recognition
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "ocr_model_proto.Request")
	proto.RegisterType((*Response)(nil), "ocr_model_proto.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OCR service

type OCRClient interface {
	Image2Text(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type oCRClient struct {
	cc *grpc.ClientConn
}

func NewOCRClient(cc *grpc.ClientConn) OCRClient {
	return &oCRClient{cc}
}

func (c *oCRClient) Image2Text(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ocr_model_proto.OCR/Image2Text", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OCR service

type OCRServer interface {
	Image2Text(context.Context, *Request) (*Response, error)
}

func RegisterOCRServer(s *grpc.Server, srv OCRServer) {
	s.RegisterService(&_OCR_serviceDesc, srv)
}

func _OCR_Image2Text_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCRServer).Image2Text(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocr_model_proto.OCR/Image2Text",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCRServer).Image2Text(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _OCR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ocr_model_proto.OCR",
	HandlerType: (*OCRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Image2Text",
			Handler:    _OCR_Image2Text_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocr_model.proto",
}

func init() { proto.RegisterFile("ocr_model.proto", fileDescriptor_ocr_model_48265b0bae3d4b7a) }

var fileDescriptor_ocr_model_48265b0bae3d4b7a = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4f, 0x2e, 0x8a,
	0xcf, 0xcd, 0x4f, 0x49, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x42, 0x08, 0xc4, 0x83,
	0x05, 0x94, 0xd4, 0xb8, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb9, 0x38,
	0xd3, 0x32, 0x73, 0x52, 0xe3, 0x0b, 0x12, 0x4b, 0x32, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0x38, 0x40, 0x02, 0x01, 0x89, 0x25, 0x19, 0x4a, 0x3a, 0x5c, 0x1c, 0x41, 0xa9, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x42, 0x0a, 0x5c, 0xdc, 0x45, 0xa9, 0xc9, 0xf9, 0xe9, 0x79, 0x99, 0x25, 0x99,
	0xf9, 0x79, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0xc8, 0x42, 0x46, 0x5e, 0x5c, 0xcc, 0xfe,
	0xce, 0x41, 0x42, 0xce, 0x5c, 0x5c, 0x9e, 0xb9, 0x89, 0xe9, 0xa9, 0x46, 0x21, 0xa9, 0x15, 0x25,
	0x42, 0x12, 0x7a, 0x68, 0x96, 0xeb, 0x41, 0x6d, 0x96, 0x92, 0xc4, 0x22, 0x03, 0xb1, 0x4b, 0x89,
	0x21, 0x89, 0x0d, 0x2c, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x35, 0xae, 0x55, 0xcb, 0xcc,
	0x00, 0x00, 0x00,
}
